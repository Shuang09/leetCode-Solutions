class Solution:
    # Time Complexity: O(nlogn)
    # Space complexity: O(n)
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        meetings.sort()
        free_rooms = list(range(n))
        busy_rooms = [] # (endtime, useroom)
        count = [0] * n


        for start, end in meetings:

            while busy_rooms and busy_rooms[0][0] <= start:
                _, room = heapq.heappop(busy_rooms)
                heapq.heappush(free_rooms, room)

            if not free_rooms:
                end_time, room = heapq.heappop(busy_rooms)
                end = end_time + (end - start)
                heapq.heappush(free_rooms, room)
            
            room = heapq.heappop(free_rooms)
            heapq.heappush(busy_rooms, (end, room))
            count[room] += 1
            


        
        return count.index(max(count))
